//==================== インポート ====================
using UnityEngine;
using System;
using System.Collections;
using CommonScore;

//==================== スコアマネージャークラス ====================
public class ScoreManager : MonoBehaviour
{
	//******************** 定数宣言 ********************
	

	//******************** メンバ変数宣言 ********************
	//++++++++++ プライベート ++++++++++
	private int	nNowScore		= 0;							//プレイ中スコア加算用
	private int	nOldScore		= 0;							//変更前のスコア保存用
	private int nRankingValue	= ConstantScore.RANKING_MAX;	//ランキングに表示する順位数
	private int[] nRanking		= null;							//ランキング用スコア保存用

	//++++++++++ プロテクト ++++++++++

	//++++++++++ パブリック ++++++++++

	//====================================================================================================
	//メソッド名	：Start
	//役割			：実行時に呼び出されるメソッド
	//引数			：void
	//戻り値		：void
	//作成者		：Nomura Syouhei
	//====================================================================================================
	void Start()
	{
		//******************** 変数初期化処理 ********************
		nNowScore		= 0;			//現在のスコア
		nOldScore		= 0;			//変更前のスコア
		nRankingValue	= 0;			//ランキングに表示する順位数
	}

	//====================================================================================================
	//メソッド名	：Update
	//役割			：更新メソッド
	//引数			：void
	//戻り値		：void
	//作成者		：Nomura Syouhei
	//====================================================================================================
	void Update()
	{

	}

	//====================================================================================================
	//メソッド名	：SortRanking
	//役割			：ランキングソートメソッド
	//引数			：void
	//戻り値		：void
	//作成者		：Nomura Syouhei
	//====================================================================================================
	public void SortRanking()
	{
		//スコアの保管数分ループ
		for(int nLoop = 1 ; nLoop < nRankingValue + 1 ; nLoop++)
		{
			//プレイヤーのスコアとランキングのスコアを比べて、ランキング内のスコアより高かったら格納
			if(nNowScore >= nRanking[nLoop])
			{
				for(int nSortLoop = 10 ; nSortLoop > nLoop ; nSortLoop --)
				{
					Debug.Log(nSortLoop);
					Debug.Log(nRanking.Length);
					nRanking[nSortLoop] = nRanking[nSortLoop - 1];
				}

				nRanking[nLoop] = nNowScore;

				break;
			}
		}
	}

	//********************************************************************** 以降、セッター **********************************************************************
	//====================================================================================================
	//メソッド名	：SetNowScore
	//役割			：現スコア設定メソッド
	//引数			：(int nSetScore)		スコア設定値
	//戻り値		：void
	//作成者		：Nomura Syouhei
	//====================================================================================================
	public void SetNowScore(int nSetScore)
	{
		//現在のスコアを変更前のスコアとして保存
		nOldScore = nNowScore;

		//現在のスコアを引数に設定
		nNowScore = nSetScore;
	}

	//====================================================================================================
	//メソッド名	：PlusNowScore
	//役割			：現スコア加算メソッド
	//引数			：(int nPlusScore)		スコア加算値
	//戻り値		：void
	//作成者		：Nomura Syouhei
	//====================================================================================================
	public void PlusNowScore(int nPlusScore)
	{
		//現在のスコアを変更前のスコアとして保存
		nOldScore = nNowScore;

		//現在のスコアに値を加算する
		nNowScore += nPlusScore;
	}

	//====================================================================================================
	//メソッド名	：SetEqualScore
	//役割			：前スコア現スコア同期メソッド
	//引数			：void
	//戻り値		：void
	//作成者		：Nomura Syouhei
	//====================================================================================================
	public void SetEqualScore()
	{
		//現在のスコアを変更前のスコアとして保存
		nOldScore = nNowScore;
	}

	//====================================================================================================
	//メソッド名	：SetRanking
	//役割			：ランキング設定メソッド
	//引数			：(int[] nSetRanking)		ランキング値
	//戻り値		：void
	//作成者		：Nomura Syouhei
	//====================================================================================================
	public void SetRanking(int[] nSetRanking)
	{
		//引数のランキングの中身を格納する
		nRanking = nSetRanking;

		//ランキングの順位数を格納する
		nRankingValue = nSetRanking[0];

		Debug.Log(nRankingValue + "　" + nSetRanking[0]);
		/*
		//ランキングの順位数だけループ
		for(int nLoop = 1 ; nLoop < nRankingValue + 1 ; nLoop++)
		{
			//現状はちゃんと格納されてるか出力
			Debug.Log(nRanking[nLoop]);
		}*/
	}

	//********************************************************************** 以降、ゲッター **********************************************************************
	//====================================================================================================
	//メソッド名	：GetNowScore
	//役割			：現スコア取得メソッド
	//引数			：void
	//戻り値		：(int型)	現在のスコア
	//作成者		：Nomura Syouhei
	//====================================================================================================
	public int GetNowScore()
	{
		//現在のスコアを返却する
		return nNowScore;
	}

	//====================================================================================================
	//メソッド名	：GetOldScore
	//役割			：変更前スコア取得メソッド
	//引数			：void
	//戻り値		：(int型)	変更前のスコア
	//作成者		：Nomura Syouhei
	//====================================================================================================
	public int GetOldScore()
	{
		//変更前のスコアを返却する
		return nOldScore;
	}

	//====================================================================================================
	//メソッド名	：GetRankingScore
	//役割			：ランキング順位毎スコア取得メソッド
	//引数			：(int nRank)	順位
	//戻り値		：(int型)		スコア値
	//作成者		：Nomura Syouhei
	//====================================================================================================
	public int GetRankingScore(int nRank)
	{
		//引数の順位に入っているランキングのスコアを返却する
		return nRanking[nRank];
	}

	//====================================================================================================
	//メソッド名	：GetRanking
	//役割			：ランキング取得メソッド
	//引数			：void
	//戻り値		：(int[]型)		ランキング
	//作成者		：Nomura Syouhei
	//====================================================================================================
	public int[] GetRanking()
	{
		//ランキングを返却する
		return nRanking;
	}
}
//================================================================================ EOF ================================================================================